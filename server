// server-parth.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//


#define _CRT_SECURE_NO_WARNINGS
#pragma comment(lib, "ws2_32.lib")
#include <winsock2.h>
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <fstream>
#include<string>
#include <vector>
#include <iomanip>
#include <algorithm>
#include <Windows.h>
using namespace std;
#pragma warning(disable: 4996)
namespace spos {
	std::string shifr(std::string password) {
		int l = password.length();
		for (int i = 0; i < l; i++)
			password[i] = password[i] + 5;
		return password;
	}
	std::string deshifr(std::string password) {
		int l = password.length();
		for (int i = 0; i < l; i++)
			password[i] = password[i] - 5;
		return password;
	}

	int check_int(int choice, int max_numb)
	{
		while (!(std::cin >> choice) || (std::cin.peek() != '\n') || (choice < 0) || (choice > max_numb))
		{
			std::cin.clear();
			while (std::cin.get() != '\n');
			std::cout << "Повторите ввод!" << std::endl;
		}
		return choice;
	}
}




class Person // Абстрактный класс профиль
{
protected:
	static string login; //логин
	string password; //пароль
public:
	//virtual int authorization(char *l, char *p) = 0;
	//virtual void authorization(string fname) = 0;
	virtual short int first_menu() = 0;
	virtual int second_menu() = 0;
	static string getlogin() {
		return login;
	}
	static void setlogin(string login) {
		Person::login = login;
	}

};

class personal {
	string name, position, expierience;
public:
	personal() { name = ""; position = ""; expierience = ""; }
	personal(string a, string b, string c) { name = a;  position = b; expierience = c; }
	friend ostream& operator<<(ostream& stream, personal obj);
	friend bool operator==(personal a, string s);
	friend bool operator>(personal a, personal b);
	friend bool operator<(personal a, personal b);
	void printInfo() {
		ifstream fin("personal.txt");
		if (fin.is_open()) {
			cout << "Файл не обнаружен. Будет создан файл с указанным именем" << endl;
		}
		else {
			//cout << "Файл открыт успешно!" << endl;
		}
		system("cls");
		cout << setw(20) << "ФИО" << setw(20) << "Должность" << setw(12) << "Опыт работы" << endl;
		//while (fin >> name && fin >> position && fin>> expierience) {
		while (getline(fin, name) && getline(fin, position) && getline(fin, expierience)) {
			cout << setw(20) << name << setw(20) << position << setw(12) << expierience << endl;
		}
		fin.close();
	}
	void addPerson() {
		//vector<personal> v;
		ofstream fin("personal.txt", ofstream::app);
		if (fin.is_open()) {
			cout << "Файл не обнаружен. Будет создан файл с указанным именем" << endl;
		}
		else {
			//cout << "Файл открыт успешно!" << endl;
		}
		system("cls");
		char c = 'y';;
		while (c == 'y') {
			cout << "Введите ФИО" << endl;  cin.ignore();  getline(cin, name);
			cout << "Введите должность" << endl;  cin >> position;
			cout << "Введите опыт работы" << endl;  cin >> expierience;
			fin << name << endl; fin << position << endl;  fin << expierience << endl;
			cout << "Желаете еще добавить запись?(y/n)" << endl; cin >> c;
		}
		fin.close();
	}
	void redactionInfo() {
		vector<personal> v;
		ifstream fin("personal.txt");
		if (!fin.is_open()) {
			cout << "Файл не обнаружен. Будет создан файл с указанным именем" << endl;
		}
		else {
			//cout << "Файл открыт успешно!" << endl;
		}
		system("cls");
		while (getline(fin, name) && getline(fin, position) && getline(fin, expierience)) {
			v.push_back(personal(name, position, expierience));
		}
		fin.close();
		cout << setw(3) << "№" << setw(20) << "ФИО" << setw(20) << "Должность" << setw(12) << "Опыт работы" << endl;
		for (int j = 0; j < v.size(); j++)
			cout << setw(3) << j + 1 << setw(20) << v[j].name << setw(20) << v[j].position << setw(12) << v[j].expierience << endl;
		cout << "Введите номер записи о работнике для редактирования." << endl; int J = 0; J = spos::check_int(J, v.size()); J = J - 1;
		cout << "введите имя и фамилию: "; string n; cin.ignore(); getline(cin, n);
		cout << "введите должность: "; string p; getline(cin, p);
		cout << "введите опыт рабюоты: "; string e; getline(cin, e);//cin.ignore(); getline(cin, e);
		v[J].name = n; v[J].position = p; v[J].expierience = e;

		ofstream f("personal.txt", ios::out);
		if (!f.is_open()) {
			cout << "Файл не обнаружен. Будет создан файл с указанным именем" << endl;
		}
		else {
			//cout << "Файл открыт успешно!" << endl;
		}
		system("cls");
		for (int j = 0; j < v.size(); j++) {
			f << v[j].name << endl << v[j].position << endl << v[j].expierience << endl;
		}
		f.close();
		cout << "Редактирование прошло успешно!" << endl;
		system("pause");
	}
	void deleteInfo() {
		vector<personal> v;
		ifstream fin("personal.txt");
		if (!fin.is_open()) {
			cout << "Файл не обнаружен. Будет создан файл с указанным именем" << endl;
		}
		else {
			//cout << "Файл открыт успешно!" << endl;
		}
		system("cls");
		int i = 0; int k = 0;
		while (getline(fin, name) && getline(fin, position) && getline(fin, expierience)) {
			v.push_back(personal(name, position, expierience));
		}
		fin.close();
		for (int j = 0; j < v.size(); j++)
			cout <<j+1<< v[j];
		cout << "Введите имя и фамилию работника, запись о котором вы желаете удалить." << endl; string n; cin.ignore(); getline(cin, n);
		vector<personal>::iterator d = find(v.begin(), v.end(), n);
		if (d != v.end()) {
			v.erase(d);
			for (int j = 0; j < v.size(); j++)
				cout << v[j];

			ofstream f("personal.txt", ios::out);
			if (!f.is_open()) {
				cout << "Файл не обнаружен. Будет создан файл с указанным именем" << endl;
			}
			else {
				//cout << "Файл открыт успешно!" << endl;
			}
			system("cls");
			for (int j = 0; j < v.size(); j++) {
				f << v[j].name << endl << v[j].position << endl << v[j].expierience << endl;
			}
			f.close();
			cout << "Удаление прошло успешно!" << endl;
		}
		else cout << "Такие имя и фамилия не найдены!" << endl;
		system("pause");
	}
	void sorting(int k) {
		vector<personal> v;
		ifstream fin("personal.txt");
		if (!fin.is_open()) {
			cout << "Файл не обнаружен. Будет создан файл с указанным именем" << endl;
		}
		else {
			//cout << "Файл открыт успешно!" << endl;
		}
		system("cls");
		while (getline(fin, name) && getline(fin, position) && getline(fin, expierience)) {
			v.push_back(personal(name, position, expierience));
		}
		fin.close();
		//cout << setw(20) << "ФИО" << setw(20) << "Должность" << setw(12) << "Опыт работы" << endl;
		//for (int j = 0; j < v.size(); j++)
		//	cout << setw(20) << v[j].name << setw(20) << v[j].position << setw(12) << v[j].expierience << endl;
		if (k == 1) sort(v.rbegin(), v.rend(), greater<personal>());
		else if (k == 2) sort(v.begin(), v.end(), less<personal>());

		cout << setw(20) << "ФИО" << setw(20) << "Должность" << setw(12) << "Опыт работы" << endl;
		for (int j = 0; j < v.size(); j++)
			cout << setw(20) << v[j].name << setw(20) << v[j].position << setw(12) << v[j].expierience << endl;

	}
	void filtration(int k) {
		vector<personal> v;
		ifstream fin("personal.txt");
		if (!fin.is_open()) {
			cout << "Файл не обнаружен. Будет создан файл с указанным именем" << endl;
		}
		else {
			//cout << "Файл открыт успешно!" << endl;
		}
		system("cls");
		while (getline(fin, name) && getline(fin, position) && getline(fin, expierience)) {
			v.push_back(personal(name, position, expierience));
		}
		fin.close();
		cout << "Введите диапазон опыта работы: "; int d1 = 0, d2 = 0; cin >> d1 >> d2;
		cout << "Ввелите должности которые вас инетересуют: "; string s1, s2; cin >> s1 >> s2;
		cout << setw(20) << "ФИО" << setw(20) << "Должность" << setw(12) << "Опыт работы" << endl;
		for (int j = 0; j < v.size(); j++)
			if ((v[j].position == s1 || v[j].position == s2) && (atoi(v[j].expierience.c_str()) >= d1 && atoi(v[j].expierience.c_str()) <= d2)) {

				cout << setw(20) << v[j].name << setw(20) << v[j].position << setw(12) << v[j].expierience << endl;
			}
	}
	void search(int k) {
		vector<personal> v;
		ifstream fin("personal.txt");
		if (!fin.is_open()) {
			cout << "Файл не обнаружен. Будет создан файл с указанным именем" << endl;
		}
		else {
			//cout << "Файл открыт успешно!" << endl;
		}
		system("cls");
		while (getline(fin, name) && getline(fin, position) && getline(fin, expierience)) {
			v.push_back(personal(name, position, expierience));
		}
		fin.close();
		if (k == 1) {
			cout << "Введите имя и фамилию сотркдника, запись о котором вы желаете удалить." << endl; string n; cin.ignore(); getline(cin, n);
			vector<personal>::iterator d = find(v.begin(), v.end(), n);
			cout << setw(20) << "ФИО" << setw(20) << "Должность" << setw(12) << "Опыт работы" << endl;
			if (d != v.end()) {
				cout << setw(20) << d->name << setw(20) << d->position << setw(12) << d->expierience << endl;
			}
			else cout << "Такого сотрудника нет!" << endl;
		}
		if (k == 2) {
			cout << "Введите должность сотркдника, запись о котором вы желаете удалить." << endl; string n; cin.ignore(); getline(cin, n);
			for (int j = 0; j < v.size(); j++)
				if (v[j].position == n) {
					cout << setw(20) << "ФИО" << setw(20) << "Должность" << setw(12) << "Опыт работы" << endl;
					cout << setw(20) << v[j].name << setw(20) << v[j].position << setw(12) << v[j].expierience << endl;
				}
			//else cout << "Такого сотрудника нет!" << endl;
		}
		if (k == 3) {
			cout << "Введите опыт работы сотркдника, запись о котором вы желаете удалить." << endl; string n; cin.ignore(); getline(cin, n);
			for (int j = 0; j < v.size(); j++)
				if (v[j].expierience == n) {
					cout << setw(20) << "ФИО" << setw(20) << "Должность" << setw(12) << "Опыт работы" << endl;
					cout << setw(20) << v[j].name << setw(20) << v[j].position << setw(12) << v[j].expierience << endl;
				}
			//else cout << "Такого сотрудника нет!" << endl;
		}
		system("pause");
	}

};
ostream& operator<<(ostream& stream, personal obj) {
	stream << obj.name << "  " << obj.position << "  " << obj.expierience << endl;
	return stream;
}
bool operator==(personal a, string s) {
	return (a.name) == s;
}
bool operator>(personal a, personal b) {
	return a.name > b.name;
}
bool operator<(personal a, personal b) {
	return a.name < b.name;
}


template<class T>
T check(T t1, T t2) {
	T p; cin >> p;
	if (p >= t1 && p <= t2) return p;
}
class zakaz {
public:

	char metod(double p1, double p2, double p3, double p4, double p5, double p6) {

		cout << "---------------------------------------------------------------------------------------------------------------------" << endl;
		cout << setw(25) << "Занимаемая должность |" << setw(30) << "Не работал в этой сфере |" << setw(30) << "Работал в этой сфере |" << setw(32) << "Постоянно работаю в этой сфере |" << endl <<
			"---------------------------------------------------------------------------------------------------------------------" << endl <<
			setw(25) << "Художник |" << setw(30) << "1 |" << setw(30) << "- |" << setw(32) << "- |" << endl <<
			"---------------------------------------------------------------------------------------------------------------------" << endl <<
			setw(25) << "Маркетолог |" << setw(30) << "3 |" << setw(30) << "4 |" << setw(32) << "5 |" << endl <<
			"---------------------------------------------------------------------------------------------------------------------" << endl <<
			setw(25) << "Креатив. директор |" << setw(30) << "5 |" << setw(30) << "7 |" << setw(32) << "10 |" << endl <<
			"---------------------------------------------------------------------------------------------------------------------" << endl;
		double R2 = p1;
		cout << endl << "---------------------------------------------------------------------------------------------------------------------" << endl;
		cout << setw(52) << "Источники аргументаций |" << setw(65) << "Степень влияния источника на ваше мнение |" << endl <<
			setw(52) << " |" << "-----------------------------------------------------------------" << endl <<
			setw(52) << " |" << setw(22) << "высокая |" << setw(21) << "средняя |" << setw(22) << "низкая |" << endl <<
			"---------------------------------------------------------------------------------------------------------------------" << endl <<
			setw(52) << "Проведенный вами теоретический анализ |" << setw(22) << "0.3 |" << setw(21) << "0.2 |" << setw(22) << "0.1 |" << endl <<
			"---------------------------------------------------------------------------------------------------------------------" << endl <<
			setw(52) << "Ваш производственный опыт |" << setw(22) << "0.5 |" << setw(21) << "0.4 |" << setw(22) << "0.2 |" << endl <<
			"---------------------------------------------------------------------------------------------------------------------" << endl <<
			setw(52) << "Обобщение работ зарубежных авторов |" << setw(22) << "0.05 |" << setw(21) << "0.05 |" << setw(22) << "0.05 |" << endl <<
			"---------------------------------------------------------------------------------------------------------------------" << endl <<
			setw(52) << "Ваше личное знакомство с состояниемдел за рубежом |" << setw(22) << "0.05 |" << setw(21) << "0.05 |" << setw(22) << "0.05 |" << endl <<
			"---------------------------------------------------------------------------------------------------------------------" << endl <<
			setw(52) << "Ваша интуиция |" << setw(22) << "0.05 |" << setw(21) << "0.05 |" << setw(22) << "0.05 |" << endl <<
			"---------------------------------------------------------------------------------------------------------------------" << endl;
		double r1 = p2, r2 = p3, r3 = 0.05, r4 = 0.05, r5 = 0.05;

		double o1 = p4, o2 = p5, o3 = p6, O1 = 0.5, O2 = 0.3, O3 = 0.2;
		cout << "Выставьте ваши оценки важности критериев от 0 до 1!" << endl;
		cout << "Стоимость: ";
		cout << "Размер (от А6  до А1): ";
		cout << "Насыщенность цвета краски: ";
		double R1 = (0.1 * 10 + 0.95) / 2;
		R2 = (0.1 * R2 + (r1 + r2 + r3 + r4 + r5)) / 2;
		cout << "Оценка вашей компетентности: " << R2 << endl; double RR1 = R1 / (R1 + R2), RR2 = R2 / (R1 + R2);
		cout << "Oтносительные оценки компетентности экспертов: " << RR1 << " и " << RR2 << endl;
		double v1 = 0, v2 = 0, v3 = 0;
		v1 = 0.5 * RR1 + o1 * RR2;
		v2 = 0.3 * RR1 + o2 * RR2;
		v3 = 0.2 * RR1 + o3 * RR2;
		cout << "Вес `Стоимости`: " << v1 << endl;
		cout << "Вес `Размера`: " << v2 << endl;
		cout << "Вес `Насыщенности цвета краски`: " << v3 << endl;
		double max1 = 0, max2 = 0, max3 = 0;
		cout << "Получилась следующее предпочтение критериев: ";
		if (v1 > v2 && v1 > v3) {

			cout << "Стоимость, "; max1 = v1;
			if (v2 > v3) { cout << "Размер, Насыщенность цвета краски."; max2 = v2; max3 = v3; }
			else { cout << "Насыщенность цвета краски, Размер."; max2 = v3; max3 = v2; }
			return '1';
		}
		if (v2 > v1 && v2 > v3) {

			cout << "Размер, "; max1 = v2;
			if (v1 > v3) { cout << "Стоимость, Насыщенность цвета краски."; max2 = v1; max3 = v3; }
			else { cout << "Насыщенность цвета краски, Стоимость."; max2 = v3; max3 = v1; }
			return '2';
		}
		if (v3 > v1 && v3 > v2) {

			cout << "Насыщенность цвета краски, ";  max1 = v3;
			if (v1 > v3) { cout << "Стоимость, Размер."; max2 = v1; max3 = v3; }
			else { cout << "Размер, Стоимость."; max2 = v3; max3 = v1; }
			return '3';
		}
		cout << endl << "Наши рекомендации по заказу книги:" << endl;
		if (v1 > v2 && v2 > v3)
			cout << "1.Книга не большого размера (А5-А6) в мягком переплете со средней плотностью бумаги и низкой насыщенностью цвета краски." << endl <<
			"2.Книга среднего размера (А4-А5) в мягком переплете со средней плотностью бумаги и средней насыщенностью цвета краски." << endl <<
			"3.Книга размера А4 в мягком или твердом переплете со средней плотностью бумаги и средней насыщенностью цвета краски." << endl <<
			"4.Книга размера А4 в твердом переплете с высокой плотностью бумаги и насыщенностыми картинками и четким текстом." << endl <<
			"5.Книга размера (А5-А6) в мягком переплете со средней плотностью бумаги и насыщенностыми картинками и четким текстом." << endl <<
			"6.Книга среднего размера (А4-А5) в твердом переплете с высокой плотностью бумаги и насыщенностыми картинками и четким текстом." << endl;
		if (v1 > v3 && v3 > v2)
			cout << "1.Книга среднего размера (А4-А5) в мягком переплете со средней плотностью бумаги и средней насыщенностью цвета краски." << endl <<
			"2.Книга не большого размера (А5-А6) в мягком переплете со средней плотностью бумаги и низкой насыщенностью цвета краски." << endl <<
			"3.Книга размера А4 в мягком или твердом переплете со средней плотностью бумаги и средней насыщенностью цвета краски." << endl <<
			"4.Книга размера А4 в твердом переплете с высокой плотностью бумаги и насыщенностыми картинками и четким текстом." << endl <<
			"5.Книга размера (А5-А6) в мягком переплете со средней плотностью бумаги и насыщенностыми картинками и четким текстом." << endl <<
			"6.Книга среднего размера (А4-А5) в твердом переплете с высокой плотностью бумаги и насыщенностыми картинками и четким текстом." << endl;
		if (v2 > v1 && v1 > v3)
			cout << "1.Книга размера А4 в мягком или твердом переплете со средней плотностью бумаги и средней насыщенностью цвета краски." << endl <<
			"2.Книга среднего размера (А4-А5) в мягком переплете со средней плотностью бумаги и средней насыщенностью цвета краски." << endl <<
			"3.Книга не большого размера (А5-А6) в мягком переплете со средней плотностью бумаги и низкой насыщенностью цвета краски." << endl <<
			"4.Книга размера А4 в твердом переплете с высокой плотностью бумаги и насыщенностыми картинками и четким текстом." << endl <<
			"5.Книга размера (А5-А6) в мягком переплете со средней плотностью бумаги и насыщенностыми картинками и четким текстом." << endl <<
			"6.Книга среднего размера (А4-А5) в твердом переплете с высокой плотностью бумаги и насыщенностыми картинками и четким текстом." << endl;
		if (v2 > v3 && v3 > v1)
			cout << "1.Книга размера А4 в твердом переплете с высокой плотностью бумаги и насыщенностыми картинками и четким текстом." << endl <<
			"2.Книга среднего размера (А4-А5) в мягком переплете со средней плотностью бумаги и средней насыщенностью цвета краски." << endl <<
			"3.Книга не большого размера (А5-А6) в мягком переплете со средней плотностью бумаги и низкой насыщенностью цвета краски." << endl <<
			"4.Книга не большого размера (А5-А6) в мягком переплете со средней плотностью бумаги и низкой насыщенностью цвета краски." << endl <<
			"5.Книга размера (А5-А6) в мягком переплете со средней плотностью бумаги и насыщенностыми картинками и четким текстом." << endl <<
			"6.Книга среднего размера (А4-А5) в твердом переплете с высокой плотностью бумаги и насыщенностыми картинками и четким текстом." << endl;
		if (v3 > v1 && v1 > v2)
			cout << "1.Книга размера (А5-А6) в мягком переплете со средней плотностью бумаги и насыщенностыми картинками и четким текстом." << endl <<
			"2.Книга среднего размера (А4-А5) в мягком переплете со средней плотностью бумаги и средней насыщенностью цвета краски." << endl <<
			"3.Книга размера А4 в мягком или твердом переплете со средней плотностью бумаги и средней насыщенностью цвета краски." << endl <<
			"4.Книга размера А4 в твердом переплете с высокой плотностью бумаги и насыщенностыми картинками и четким текстом." << endl <<
			"5.Книга не большого размера (А5-А6) в мягком переплете со средней плотностью бумаги и низкой насыщенностью цвета краски." << endl <<
			"6.Книга среднего размера (А4-А5) в твердом переплете с высокой плотностью бумаги и насыщенностыми картинками и четким текстом." << endl;
		if (v3 > v2 && v2 > v1)
			cout << "1.Книга среднего размера (А4-А5) в твердом переплете с высокой плотностью бумаги и насыщенностыми картинками и четким текстом." << endl <<
			"2.Книга размера А4 в твердом переплете с высокой плотностью бумаги и насыщенностыми картинками и четким текстом." << endl <<
			"3.Книга не большого размера (А5-А6) в мягком переплете со средней плотностью бумаги и низкой насыщенностью цвета краски." << endl <<
			"4.Книга среднего размера (А4-А5) в мягком переплете со средней плотностью бумаги и средней насыщенностью цвета краски." << endl <<
			"5.Книга размера (А5-А6) в мягком переплете со средней плотностью бумаги и насыщенностыми картинками и четким текстом." << endl <<
			"6.Книга не большого размера (А5-А6) в мягком переплете со средней плотностью бумаги и низкой насыщенностью цвета краски." << endl;
		int c = 0;
		system("pause");
	}
	void metod2() {
		double R2;
		cout << "---------------------------------------------------------------------------------------------------------------------" << endl;
		cout << setw(25) << "Занимаемая должность |" << setw(30) << "Не работал в этой сфере |" << setw(30) << "Работал в этой сфере |" << setw(32) << "Постоянно работаю в этой сфере |" << endl <<
			"---------------------------------------------------------------------------------------------------------------------" << endl <<
			setw(25) << "Художник |" << setw(30) << "1 |" << setw(30) << "- |" << setw(32) << "- |" << endl <<
			"---------------------------------------------------------------------------------------------------------------------" << endl <<
			setw(25) << "Маркетолог |" << setw(30) << "3 |" << setw(30) << "4 |" << setw(32) << "5 |" << endl <<
			"---------------------------------------------------------------------------------------------------------------------" << endl <<
			setw(25) << "Креатив. директор |" << setw(30) << "5 |" << setw(30) << "7 |" << setw(32) << "10 |" << endl <<
			"---------------------------------------------------------------------------------------------------------------------" << endl;
		while (true) {
			cout << "Введите значение,находящееся на перекрестии: ";
			cin >> R2;
			if (R2 == 1 || R2 == 3 || R2 == 4 || R2 == 5 || R2 == 7 || R2 == 10)
				break;
		}
		cout << endl << "---------------------------------------------------------------------------------------------------------------------" << endl;
		cout << setw(52) << "Источники аргументаций |" << setw(65) << "Степень влияния источника на ваше мнение |" << endl <<
			setw(52) << " |" << "-----------------------------------------------------------------" << endl <<
			setw(52) << " |" << setw(22) << "высокая |" << setw(21) << "средняя |" << setw(22) << "низкая |" << endl <<
			"---------------------------------------------------------------------------------------------------------------------" << endl <<
			setw(52) << "Проведенный вами теоретический анализ |" << setw(22) << "0.3 |" << setw(21) << "0.2 |" << setw(22) << "0.1 |" << endl <<
			"---------------------------------------------------------------------------------------------------------------------" << endl <<
			setw(52) << "Ваш производственный опыт |" << setw(22) << "0.5 |" << setw(21) << "0.4 |" << setw(22) << "0.2 |" << endl <<
			"---------------------------------------------------------------------------------------------------------------------" << endl <<
			setw(52) << "Обобщение работ зарубежных авторов |" << setw(22) << "0.05 |" << setw(21) << "0.05 |" << setw(22) << "0.05 |" << endl <<
			"---------------------------------------------------------------------------------------------------------------------" << endl <<
			setw(52) << "Ваше личное знакомство с состояниемдел за рубежом |" << setw(22) << "0.05 |" << setw(21) << "0.05 |" << setw(22) << "0.05 |" << endl <<
			"---------------------------------------------------------------------------------------------------------------------" << endl <<
			setw(52) << "Ваша интуиция |" << setw(22) << "0.05 |" << setw(21) << "0.05 |" << setw(22) << "0.05 |" << endl <<
			"---------------------------------------------------------------------------------------------------------------------" << endl;
		double r1 = 0, r2 = 0, r3 = 0, r4 = 0, r5 = 0;
		cout << "Введите оценки по критериям: " << endl <<
			"Проведенный вами теоретический анализ: ";
		while (true) {
			cin >> r1;
			if (r1 == 0.3 || r1 == 0.2 || r1 == 0.1)
				break;
		}
		cout << endl << "Ваш производственный опыт: ";
		while (true) {
			cin >> r2;
			if (r2 == 0.5 || r2 == 0.4 || r2 == 0.2)
				break;
		}
		cout << endl << "Обобщение работ зарубежных авторов: ";
		while (true) {
			cin >> r3;
			if (r3 == 0.05)
				break;
		}
		cout << endl << "Ваше личное знакомство с состоянием дел за рубежом: ";
		while (true) {
			cin >> r4;
			if (r4 == 0.05)
				break;
		}
		cout << endl << "Ваша интуиция: ";
		while (true) {
			cin >> r5;
			if (r5 == 0.05)
				break;
		}
		double o1 = 0, o2 = 0, o3 = 0, O1 = 0.5, O2 = 0.3, O3 = 0.2;
		cout << "Выставьте ваши оценки важности критериев от 0 до 10!" << endl;
		cout << "Стоимость: "; o1 = check(0.0, 9.99); o1 *= 0.1;
		cout << "Размер (от А6  до А1): ";  o2 = check(0.0, 9.99); o2 *= 0.1;
		cout << "Насыщенность цвета краски: "; o3 = check(0.0, 9.99); o3 *= 0.1;
		double R1 = (0.1 * 10 + 0.95) / 2;
		R2 = (0.1 * R2 + (r1 + r2 + r3 + r4 + r5)) / 2;
		cout << "Оценка вашей компетентности: " << R2 << endl; double RR1 = R1 / (R1 + R2), RR2 = R2 / (R1 + R2);
		cout << "Oтносительные оценки компетентности экспертов: " << RR1 << " и " << RR2 << endl;
		double v1 = 0, v2 = 0, v3 = 0;
		v1 = 0.5 * RR1 + o1 * RR2;
		v2 = 0.3 * RR1 + o2 * RR2;
		v3 = 0.2 * RR1 + o3 * RR2;
		cout << "Вес `Стоимости`: " << v1 << endl;
		cout << "Вес `Размера`: " << v2 << endl;
		cout << "Вес `Насыщенности цвета краски`: " << v3 << endl;
		double max1 = 0, max2 = 0, max3 = 0;
		cout << "Получилась следующее предпочтение критериев: ";
		if (v1 > v2 && v1 > v3) {
			cout << "Стоимость, "; max1 = v1;
			if (v2 > v3) { cout << "Размер, Насыщенность цвета краски."; max2 = v2; max3 = v3; }
			else { cout << "Насыщенность цвета краски, Размер."; max2 = v3; max3 = v2; }
		}
		if (v2 > v1 && v2 > v3) {
			cout << "Размер, "; max1 = v2;
			if (v1 > v3) { cout << "Стоимость, Насыщенность цвета краски."; max2 = v1; max3 = v3; }
			else { cout << "Насыщенность цвета краски, Стоимость."; max2 = v3; max3 = v1; }
		}
		if (v3 > v1 && v3 > v2) {
			cout << "Насыщенность цвета краски, ";  max1 = v3;
			if (v1 > v3) { cout << "Стоимость, Размер."; max2 = v1; max3 = v3; }
			else { cout << "Размер, Стоимость."; max2 = v3; max3 = v1; }
		}
		cout << endl << "Наши рекомендации по заказу книги:" << endl;
		if (v1 > v2 && v2 > v3)
			cout << "1.Книга не большого размера (А5-А6) в мягком переплете со средней плотностью бумаги и низкой насыщенностью цвета краски." << endl <<
			"2.Книга среднего размера (А4-А5) в мягком переплете со средней плотностью бумаги и средней насыщенностью цвета краски." << endl <<
			"3.Книга размера А4 в мягком или твердом переплете со средней плотностью бумаги и средней насыщенностью цвета краски." << endl <<
			"4.Книга размера А4 в твердом переплете с высокой плотностью бумаги и насыщенностыми картинками и четким текстом." << endl <<
			"5.Книга размера (А5-А6) в мягком переплете со средней плотностью бумаги и насыщенностыми картинками и четким текстом." << endl <<
			"6.Книга среднего размера (А4-А5) в твердом переплете с высокой плотностью бумаги и насыщенностыми картинками и четким текстом." << endl;
		if (v1 > v3 && v3 > v2)
			cout << "1.Книга среднего размера (А4-А5) в мягком переплете со средней плотностью бумаги и средней насыщенностью цвета краски." << endl <<
			"2.Книга не большого размера (А5-А6) в мягком переплете со средней плотностью бумаги и низкой насыщенностью цвета краски." << endl <<
			"3.Книга размера А4 в мягком или твердом переплете со средней плотностью бумаги и средней насыщенностью цвета краски." << endl <<
			"4.Книга размера А4 в твердом переплете с высокой плотностью бумаги и насыщенностыми картинками и четким текстом." << endl <<
			"5.Книга размера (А5-А6) в мягком переплете со средней плотностью бумаги и насыщенностыми картинками и четким текстом." << endl <<
			"6.Книга среднего размера (А4-А5) в твердом переплете с высокой плотностью бумаги и насыщенностыми картинками и четким текстом." << endl;
		if (v2 > v1 && v1 > v3)
			cout << "1.Книга размера А4 в мягком или твердом переплете со средней плотностью бумаги и средней насыщенностью цвета краски." << endl <<
			"2.Книга среднего размера (А4-А5) в мягком переплете со средней плотностью бумаги и средней насыщенностью цвета краски." << endl <<
			"3.Книга не большого размера (А5-А6) в мягком переплете со средней плотностью бумаги и низкой насыщенностью цвета краски." << endl <<
			"4.Книга размера А4 в твердом переплете с высокой плотностью бумаги и насыщенностыми картинками и четким текстом." << endl <<
			"5.Книга размера (А5-А6) в мягком переплете со средней плотностью бумаги и насыщенностыми картинками и четким текстом." << endl <<
			"6.Книга среднего размера (А4-А5) в твердом переплете с высокой плотностью бумаги и насыщенностыми картинками и четким текстом." << endl;
		if (v2 > v3 && v3 > v1)
			cout << "1.Книга размера А4 в твердом переплете с высокой плотностью бумаги и насыщенностыми картинками и четким текстом." << endl <<
			"2.Книга среднего размера (А4-А5) в мягком переплете со средней плотностью бумаги и средней насыщенностью цвета краски." << endl <<
			"3.Книга не большого размера (А5-А6) в мягком переплете со средней плотностью бумаги и низкой насыщенностью цвета краски." << endl <<
			"4.Книга не большого размера (А5-А6) в мягком переплете со средней плотностью бумаги и низкой насыщенностью цвета краски." << endl <<
			"5.Книга размера (А5-А6) в мягком переплете со средней плотностью бумаги и насыщенностыми картинками и четким текстом." << endl <<
			"6.Книга среднего размера (А4-А5) в твердом переплете с высокой плотностью бумаги и насыщенностыми картинками и четким текстом." << endl;
		if (v3 > v1 && v1 > v2)
			cout << "1.Книга размера (А5-А6) в мягком переплете со средней плотностью бумаги и насыщенностыми картинками и четким текстом." << endl <<
			"2.Книга среднего размера (А4-А5) в мягком переплете со средней плотностью бумаги и средней насыщенностью цвета краски." << endl <<
			"3.Книга размера А4 в мягком или твердом переплете со средней плотностью бумаги и средней насыщенностью цвета краски." << endl <<
			"4.Книга размера А4 в твердом переплете с высокой плотностью бумаги и насыщенностыми картинками и четким текстом." << endl <<
			"5.Книга не большого размера (А5-А6) в мягком переплете со средней плотностью бумаги и низкой насыщенностью цвета краски." << endl <<
			"6.Книга среднего размера (А4-А5) в твердом переплете с высокой плотностью бумаги и насыщенностыми картинками и четким текстом." << endl;
		if (v3 > v2 && v2 > v1)
			cout << "1.Книга среднего размера (А4-А5) в твердом переплете с высокой плотностью бумаги и насыщенностыми картинками и четким текстом." << endl <<
			"2.Книга размера А4 в твердом переплете с высокой плотностью бумаги и насыщенностыми картинками и четким текстом." << endl <<
			"3.Книга не большого размера (А5-А6) в мягком переплете со средней плотностью бумаги и низкой насыщенностью цвета краски." << endl <<
			"4.Книга среднего размера (А4-А5) в мягком переплете со средней плотностью бумаги и средней насыщенностью цвета краски." << endl <<
			"5.Книга размера (А5-А6) в мягком переплете со средней плотностью бумаги и насыщенностыми картинками и четким текстом." << endl <<
			"6.Книга не большого размера (А5-А6) в мягком переплете со средней плотностью бумаги и низкой насыщенностью цвета краски." << endl;
		int c = 0;
		cout << "Введите номер вашего выбора: "; c = check(1, 6);
		system("pause");
	}
	/*
	int zakazat() {
		ofstream fin("zakaz.txt", ofstream::app);
		if (!fin.is_open()) {
			cout << "Файл не обнаружен. Будет создан файл с указанным именем" << endl;
		}
		else {
			cout << "Файл открыт успешно!" << endl;

			system("cls");
			cout << "Выберите позиция" << endl <<
				"1.Книга" << endl <<
				"2.Журнал" << endl <<
				"3.Визитка" << endl;
			spos::check_int(position, 3);
			cout << "Введите количесто экземпляров" << endl;
			spos::check_int(quantity,10000);
			fin << position<<endl;
			fin << quantity << endl;
			fin.close();
			return 0;
		}
	}*/
	/*
	int vipolnit_zakaz() {
		ifstream fin("zakaz.txt");
		if (!fin.is_open()) {
			cout << "Файл не обнаружен. Будет создан файл с указанным именем" << endl;
		}
		else {
			cout << "Файл открыт успешно!" << endl;

			system("cls");
			int kol = 0;
			while (fin >> position && fin >> quantity) {
				kol++;
			}
			int* p = new int[kol];
			int* q = new int[kol];
			for (int i = 0; i < kol; i++) {
				fin >> p[i];
				fin >> q[i];
			}
			fin.close();

			int c = 0;
			cout << "Нажмите 1 чтобы выполнить первый заказ в очереди или 0 чтобы выйти" << endl; c = spos::check_int(c, 1);
			if (c == 1) {
				int A = 0, B = 0;
				ifstream fin("source.txt");
				if (!fin.is_open()) {
					cout << "Файл не обнаружен. Будет создан файл с указанным именем" << endl;
				}
				else {
					cout << "Файл открыт успешно!" << endl;

					//system("cls");

					fin >> A;
					fin >> B;
					fin.close();

					if (p[0] == 1) {
						if (6 * q[0] > A && 3 * q[0]>B) {
							cout << "Недостаточно материалов" << endl; return 0;
						}
						else {
							A = A - 6 * q[0];
							B = B - 3 * q[0];
						}
					}
					if (p[0] == 2) {
						if (3 * q[0] > A && 2 * q[0] > B) {
							cout << "Недостаточно материалов" << endl; return 0;
						}
						else {
							A = A - 3 * q[0];
							B = B - 2 * q[0];
						}
					}
					if (p[0] == 3) {
						if (1 * q[0] > A && 1 * q[0] > B) {
							cout << "Недостаточно материалов" << endl; return 0;
						}
						else {
							A = A - 1 * q[0];
							B = B - 1 * q[0];
						}
					}
					ofstream fin("source.txt", std::ios::out);
					if (!fin.is_open()) {
						cout << "Файл не обнаружен. Будет создан файл с указанным именем" << endl;
					}
					else {
						cout << "Файл открыт успешно!" << endl;

						system("cls");
						fin << A<<endl;
						fin << B<<endl;
						fin.close();
					}

					ofstream f("zakaz.txt", std::ios::out);
					if (!fin.is_open()) {
						cout << "Файл не обнаружен. Будет создан файл с указанным именем" << endl;
					}
					else {
						for (int i = 1; i < kol; i++) {
							f << p[i] << endl;
							f << q[i] << endl;
						}
						f.close();

					}
					ofstream fi("history_zakazov.txt", ofstream::app);
					if (!fin.is_open()) {
						cout << "Файл не обнаружен. Будет создан файл с указанным именем" << endl;
					}
					else {
							fi << p[0] << endl;
							fi << q[0] << endl;

						fi.close();

					}

					delete p, q;
				}

			}else return 0;
		}
	}*/
	/*
		void history(){
			ifstream fin("history_zakazov.txt");
			if (!fin.is_open()) {
				cout << "Файл не обнаружен. Будет создан файл с указанным именем" << endl;
			}
			else {
				int p=0, q=0;
				cout << "Наименование позиции                Количество" << endl;
				while (fin >> p && fin >> q) {

					if(p==1) cout << "Книга" << "                " << q << endl;
					if (p == 2) cout << "Журнал"<< "                " << q << endl;
					if (p == 3) cout << "Визитка" << "                " << q << endl;
				}
				fin.close();

			}
		}*/

};
class source {
	int A, B;
public:
	int check_addSource() {
		ifstream fin("source.txt");
		if (!fin.is_open()) {
			cout << "Файл не обнаружен. Будет создан файл с указанным именем" << endl;
		}
		else {
			//cout << "Файл открыт успешно!" << endl;
		}
		system("cls");

		fin >> A;
		fin >> B;
		fin.close();
		cout << "На данный момент на складе " << A << " метров квадратных бумаги и " << B << " литров краски." << endl;
		cout << "Желаете ли вы поплнить запасы?(0/1)" << endl;
		int c = 3;
		c = spos::check_int(c, 1);
		if (c == 0) return 0;
		else {
			int a, b;
			cout << "На сколько метров квадратных поплнить запасы бумаги?  "; cin >> a;
			cout << "На сколько литров поплнить запасы краски?  "; cin >> b;
			A += a;
			B += b;
			ofstream fin("source.txt", std::ios::out);
			if (!fin.is_open()) {
				cout << "Файл не обнаружен. Будет создан файл с указанным именем" << endl;
			}
			else {
				//cout << "Файл открыт успешно!" << endl;

				system("cls");
				fin << A << endl;
				fin << B << endl;
				fin.close();
			}
		}

	}
};

class dep {
	string name, adress, contact;
public:

	void redact() {
		ifstream fin("dep.txt");
		if (!fin.is_open()) {
			cout << "Файл не обнаружен. Будет создан файл с указанным именем" << endl;
		}
		else {
			//cout << "Файл открыт успешно!" << endl;
		}
		system("cls");

		getline(fin, name);
		getline(fin, adress);
		getline(fin, contact);
		fin.close();
		cout << "Название: "; cout << name << endl;;
		cout << "Адрес: "; cout << adress << endl;;
		cout << "Контакты: "; cout << contact<<endl;
		cout << "Хотите редактировать название?(y/n)" << endl; char c; cin >> c;
		if (c == 'y') {
			cout << "Введите новое название: "; cin.ignore(); getline(cin, name);
		}
		cout << endl << "Хотите редактировать адрес?(y/n)" << endl;  cin >> c;
		if (c == 'y') {
			cout << "Введите новый адрес: "; cin.ignore(); getline(cin, adress);
		}
		cout<<endl << "Хотите редактировать контыкты?(y/n)" << endl;  cin >> c;
		if (c == 'y') {
			cout << "Введите новые контыкты: "; cin.ignore(); getline(cin, contact);
		}
		ofstream f("dep.txt", ios::out);
		if (!fin.is_open()) {
			cout << "Файл не обнаружен. Будет создан файл с указанным именем" << endl;
		}
		else {
			//cout << "Файл открыт успешно!" << endl;
		}
		system("cls");

		f << name << endl;;
		f << adress << endl;
		f << contact << endl;;
		f.close();
	}
	string getName() {
		ifstream fin("dep.txt", ios::binary);
		if (!fin.is_open()) {
			cout << "Файл не обнаружен. Будет создан файл с указанным именем" << endl;
		}
		else {
			//cout << "Файл открыт успешно!" << endl;
		}
		//system("cls");

		getline(fin, name);
		getline(fin, adress);
		getline(fin, contact);
		fin.close();
		return name;
	}
	string getAdress() {
		ifstream fin("dep.txt", ios::binary);
		if (!fin.is_open()) {
			cout << "Файл не обнаружен. Будет создан файл с указанным именем" << endl;
		}
		else {
			//cout << "Файл открыт успешно!" << endl;
		}
		//system("cls");

		getline(fin, name);
		getline(fin, adress);
		getline(fin, contact);
		fin.close();
		return adress;
	}
	string getContact() {
		ifstream fin("dep.txt", ios::binary);
		if (!fin.is_open()) {
			cout << "Файл не обнаружен. Будет создан файл с указанным именем" << endl;
		}
		else {
			//cout << "Файл открыт успешно!" << endl;
		}
		//system("cls");

		getline(fin, name);
		getline(fin, adress);
		getline(fin, contact);
		fin.close();
		return contact;
	}
};

class Admin : public Person
{
	string login, password;
public:
	string log, passw;
	Admin() {}
	Admin(string log, string pass) { login = log; password = pass; }
	friend ostream& operator<<(ostream& stream, Admin obj);
	friend bool operator==(Admin a, string s);
	virtual int authorization(string fname) {
		//login = l; password = p;
		while (1)
		{
			int c = 0;
			ifstream fin(fname);
			if (!fin.is_open()) {
				cout << "Файл не обнаружен. Будет создан файл с указанным именем" << endl;
			}
			else {
				//cout << "Файл открыт успешно!" << endl;
			}
			system("cls");
			cout << "Введите логин: ";  cin >> login;
			cout << "Введите пороль: "; cin >> password;
			password = spos::shifr(password);
			while (!fin.eof())
			{
				fin >> log;
				fin >> passw;
				if ((login == log) && (password == passw))
				{
					c++;
					break;
				}
			}
			fin.close();
			if (c != 0) { return 5; }
			else {
				system("cls");
				cout << "Неправильно введен логин или пароль" << endl;
				break;
			}

		}
	}
	void registration(string fname) {
		ofstream fin(fname, iostream::app);
		if (!fin.is_open()) {
			cout << "Файл не обнаружен. Будет создан файл с указанным именем" << endl;
		}
		else {
			//cout << "Файл открыт успешно!" << endl;

			system("cls");
			cout << "Введите логин: ";  cin >> login;
			cout << "Введите пороль: "; cin >> password;
			password = spos::shifr(password);
			fin << login << endl;
			fin << password << endl;

		}
		fin.close();
	}
	void del(string fname) {
		vector<Admin> v;
		ifstream fin(fname);
		if (!fin.is_open()) {
			cout << "Файл не обнаружен. Будет создан файл с указанным именем" << endl;
		}
		else {
			//cout << "Файл открыт успешно!" << endl;
		}
		system("cls");
		int i = 0; int k = 0;
		while (fin >> login && fin >> password) {
			v.push_back(Admin(login, password));
		}
		fin.close();
		for (int j = 0; j < v.size(); j++)
			cout << v[j];
		cout << "Введите login пользователя, запись о котором вы желаете удалить." << endl; string log; cin.ignore(); getline(cin, log);
		vector<Admin>::iterator d = find(v.begin(), v.end(), log);
		if (d != v.end()) {
			v.erase(d);
			for (int j = 0; j < v.size(); j++)
				cout << v[j];

			ofstream f(fname, ios::out);
			if (!f.is_open()) {
				cout << "Файл не обнаружен. Будет создан файл с указанным именем" << endl;
			}
			else {
				//cout << "Файл открыт успешно!" << endl;
			}
			system("cls");
			for (int j = 0; j < v.size(); j++) {
				f << v[j].login << endl << v[j].password << endl;
			}
			f.close();
		}
		else cout << "Такой login не найден!" << endl;
	}
	void print(string fname) {
		ifstream fin(fname);
		if (!fin.is_open()) {
			cout << "Файл не обнаружен. Будет создан файл с указанным именем" << endl;
		}
		else {
			//cout << "Файл открыт успешно!" << endl;
		}
		system("cls");
		cout << "логин " << " пароль " << endl;
		while (fin >> login && fin >> password) {
			cout << login << "  " << password << endl;
		}
		system("pause");
		fin.close();
	}
	short int first_menu()
	{
		system("cls");
		int choice = 0;
		cout << "Меню:" << endl
			<< "1. Информация о печатном издательстве." << endl
			<< "2. Информация о персонале." << endl
			<< "3. Управление складом." << endl
			<< "4. Управление пользователями." << endl
			<< "5. Заказ" << endl
			<< "6. Выход." << endl;
		choice = spos::check_int(choice, 6);
		return choice;
	}

	int second_menu()
	{
		int i = 0, x = 0;
		short int choice = 1;
		Admin admin;
		dep depo;
		personal person;
		zakaz zak;
		while (true)
		{
			choice = first_menu();
			system("cls");
			switch (choice) {
			case 1:
				system("cls");
				cout << "1. Просмотр информации" << endl
					<< "2. Редактировать информацию" << endl
					<< "3. Выход" << endl;
				choice = spos::check_int(choice, 3);
				if (choice == 1) {
					cout << "Название: " << depo.getName() << endl;
					cout << "Адрес: " << depo.getAdress() << endl;
					cout << "Контакты: " << depo.getContact() << endl;
					//system("pause");
				}
				else if (choice == 2) {
					depo.redact();
					//system("pause");
				}
				system("pause");
				break;

			case 2:
				cout << "1. Сортировка персонала." << endl
					<< "2. Поиск персонала. " << endl
					<< "3. Добавление персонала." << endl
					<< "4. Просмотр всего персонала.  " << endl
					<< "5. Фильтрация персонала." << endl
					<< "6. Редактирование информации о персонала." << endl
					<< "7. Удаление записи о персонала." << endl
					<< "8. Выход." << endl;
				choice = spos::check_int(choice, 8);
				if (choice == 1)
				{
					system("cls");
					cout << "1. Сортировать по имени(по возрастанию) " << endl
						<< "2. Выход" << endl;
					i = spos::check_int(i, 2);
					if (i == 1)
						person.sorting(1);
					if (i == 2)
						person.sorting(2);
					system("pause");
					break;
				}
				else if (choice == 2)
				{
					cout << "1.поиск по имени" << endl <<
						"2.поиск по должности" << endl <<
						"3.поиск по опыту работы" << endl;
					i = spos::check_int(i, 3);
					system("cls");
					person.search(i);
					system("pause");
				}
				else if (choice == 3)
				{
					system("cls");
					person.addPerson();
					system("pause");
				}
				else if (choice == 4)
				{
					system("cls");
					person.printInfo();
					system("pause");
				}
				else if (choice == 5)
				{
					system("cls");
					person.filtration(1);
					system("pause");
				}
				else if (choice == 6)
				{
					system("cls");
					person.redactionInfo();
					system("pause");
				}
				else if (choice == 7)
				{
					person.deleteInfo();
				}
				else
					break;
				break;
			case 3:
				source sour;
				cout << "Проверить и пополнить склад?(y/n)" << endl;
				char c; cin >> c;
				if (c == 'y') sour.check_addSource();
				break;
			case 4:
				system("cls");
				cout << "1. Создать пользователя " << endl
					<< "2. Удалить пользователя " << endl
					<< "3. Просмотр всех пользователей" << endl
					<< "4. Выход " << endl;
				i = spos::check_int(i, 4);
				if (i == 1) {
					cout << "1.Создать учетную запись с правами администратора" << endl << "2.Создать учетную запись с правами пользователя" << endl; int c = 0; c = spos::check_int(c, 2);
					if (c == 1)
						admin.registration("admin.txt");
					else if (c == 2) admin.registration("user.txt");
				}
				else if (i == 2) {
					cout << "1.Удалить учетную запись с правами администратора" << endl << "2.Удалить учетную запись с правами пользователя" << endl; int c = 0; c = spos::check_int(c, 2);
					if (c == 1)
						admin.del("admin.txt");
					else if (c == 2) admin.del("user.txt");
				}
				else if (i == 3) {
					cout << "1.Просмтр учетных записей с правами администратора" << endl << "2.Просмтр учетных записей с правами пользователя" << endl; int c = 0; c = spos::check_int(c, 2);
					if (c == 1)
						admin.print("admin.txt");
					else if (c == 2) admin.print("user.txt");
				}
				break;
			case 5:
				zak.metod2();
				break;
			case 6:
				system("cls");
				return 0;
				break;

			}

		}

	}
};
ostream& operator<<(ostream& stream, Admin obj) {
	stream << obj.login << "  " << obj.password << endl;
	return stream;
}
bool operator==(Admin a, string s) {
	return (a.login) == s;
}

class User : public Person
{
	string login, password;
public:
	string log, passw;
	User() { login = ""; password = ""; }
	User(string a, string b) { login = a; password = b; }
	friend ostream& operator<<(ostream& stream, User obj);
	friend bool operator==(User a, string s);
	virtual int  authorization(char* l, char* p) {
		login = l; password = p;
		while (1)
		{
			int c = 0;
			ifstream fin("user.txt");
			if (!fin.is_open()) {
				cout << "Файл не обнаружен. Будет создан файл с указанным именем" << endl;
			}
			else {
				//cout << "Файл открыт успешно!" << endl;
			}
			//system("cls");
			//cout << "Введите логин: ";  cin >> login;
			//cout << "Введите пороль: "; cin >> password;
			password = spos::shifr(password);
			while (!fin.eof())
			{
				fin >> log;
				fin >> passw;
				if ((login == log) && (password == passw))
				{
					c++;
					break;
				}
			}
			fin.close();
			if (c != 0)  return 1;  //{ second_menu(); break; }
			else {
				system("cls");
				cout << "Неправильно введен логин или пароль" << endl;
				return 0;
				break;
			}

		}
	}
	int redacLogin(char* l, char* p, char* l2, char* p2) {
		vector<User> v;
		ifstream fin("user.txt");
		if (!fin.is_open()) {
			cout << "Файл не обнаружен. Будет создан файл с указанным именем" << endl;
		}
		else {
			//cout << "Файл открыт успешно!" << endl;
		}
		//system("cls");
		int i = 0; int k = 0;
		while (fin >> login && fin >> password) {
			v.push_back(User(login, password));
		}
		fin.close();
		k = 0;
		//cout << "Введите свой логин: "; string log; cin >> log;
		//cout << "Введите свой пароль: "; string pas; cin >> pas;
		string log, logg = l2; string pas; string passw = p2; passw = spos::shifr(passw);
		log = l; pas = p; pas = spos::shifr(pas);
		for (int j = 0; j < v.size(); j++) {
			if (v[j].login == log && v[j].password == pas) {
				//cout << "Введите новый логин:"; cin >> log;
				//cout << "Введите новый пароль:"; cin >> pas;

				v[j].login = logg; v[j].password = passw;
				ofstream f("user.txt", ios::out);
				if (!f.is_open()) {
					cout << "Файл не обнаружен. Будет создан файл с указанным именем" << endl;
				}
				else {
					//cout << "Файл открыт успешно!" << endl;
				}
				//system("cls");
				for (int j = 0; j < v.size(); j++) {
					f << v[j].login << endl << v[j].password << endl;
				}
				f.close();
				k++;
				break;
			}
		}
		if (k == 0) { cout << "Такого логина или пароля нет!" << endl;  return 0; }
		else return 5;
	}
	short int first_menu()
	{
		system("cls");
		int choice = 0;
		cout << "Меню:" << endl
			<< "1. Информация об книжном издательстве." << endl
			<< "2. Управление учетной записью." << endl
			<< "3. Заказ" << endl
			<< "4. Выход." << endl;
		choice = spos::check_int(choice, 5);
		return choice;
	}
	int second_menu()
	{

		int i = 0, x = 0;
		short int choice = 1;
		dep d;
		User user;
		zakaz zak;
		while (true)
		{
			choice = first_menu();
			system("cls");
			switch (choice) {
			case 1:
				system("cls");
				//d.printInfo();
				break;
			case 2:
				system("cls");
				//user.redacLogin();
				system("pause");
				break;
			case 3:
				system("cls");
				zak.metod2();
				break;
			case 4:
				system("cls");
				return false;
				break;
			}
		}
	}
	int registration(char* l, char* p) {
		ofstream fin("user.txt", iostream::app);
		if (!fin.is_open()) {
			cout << "Файл не обнаружен. Будет создан файл с указанным именем" << endl;
		}
		else {
			//cout << "Файл открыт успешно!" << endl;

			system("cls");
			login = l;
			password = p;
			//cout << "Введите логин: ";  cin >> login;
			//cout << "Введите пороль: "; cin >> password;
			password = spos::shifr(password);
			fin << login << endl;
			fin << password << endl;

		}
		fin.close();
		return 5;
	}
};
ostream& operator<<(ostream& stream, User obj) {
	stream << obj.login << "  " << obj.password << endl;
	return stream;
}
bool operator==(User a, string s) {
	return (a.login) == s;
}
int main()
{
	setlocale(LC_ALL, "ru");
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	WSADATA wsaData;
	WORD wVersionRequested = MAKEWORD(2, 1);
	if (WSAStartup(wVersionRequested, &wsaData) != 0) {
		cout << "Error" << endl;
		exit(1);
	}

	struct sockaddr_in addr;
	int sizeofaddr = sizeof(addr);
	addr.sin_family = AF_INET;
	addr.sin_port = htons(1111);//1280
	addr.sin_addr.s_addr = inet_addr("127.0.0.1");

	SOCKET sListen = socket(AF_INET, SOCK_STREAM, NULL);
	bind(sListen, (SOCKADDR*)&addr, sizeof(addr));

	Admin admin;
	cout << "Желаете работать на сервере?(y/n)" << endl; char s; cin >> s;
	if (s == 'y') {
		if (admin.authorization("admin.txt") == 5) {
			if (admin.second_menu() == 0)
				s = 'n';
		}
	}
	if (s == 'n') {

		listen(sListen, SOMAXCONN);
		SOCKET newConnection;
		newConnection = accept(sListen, (SOCKADDR*)&addr, &sizeofaddr);

		User user;
		dep d;
		zakaz zak;
		int choise = -1;
		char ch;
		char c_msg[40];

		char login[200] = { 0 }, passw[200] = { 0 };
		char login2[200] = { 0 }, passw2[200] = { 0 };
		if (newConnection == 0) {
			cout << "Error" << endl;
		}
		else {
			cout << "Client connected!\n";
			while (true) {
				recv(newConnection, &ch, sizeof(ch), NULL);
				if (ch == '1') {
					recv(newConnection, login, sizeof(login), NULL);
					recv(newConnection, passw, sizeof(passw), NULL);

					if (user.registration(login, passw) == 5) {
						ch = '1';
						send(newConnection, &ch, sizeof(ch), NULL);
					}
					else {
						ch = '0';
						send(newConnection, &ch, sizeof(ch), NULL);
					}
				}
				if (ch == '2') {
					char clen_log[2] = { 0 }, clen_pas[2] = { 0 };
					recv(newConnection, clen_log, sizeof(clen_log), NULL);
					int len_log = atoi(clen_log);
					cout << "kol-vo elementov logina: " << len_log << endl;
					recv(newConnection, clen_pas, sizeof(clen_pas), NULL);
					int len_pas = atoi(clen_pas);
					cout << "kol-vo elementov parolia: " << len_pas << endl;
					recv(newConnection, login, len_log, NULL);
					recv(newConnection, passw, len_pas, NULL);
					if (user.authorization(login, passw) == 1) {
						ch = '1';
						send(newConnection, &ch, sizeof(ch), NULL);
						recv(newConnection, &ch, sizeof(ch), NULL);
						if (ch == '1') {
							char* name = {}, * adress = {}, * contact = {};
							int k1 = d.getName().length(); int k2 = d.getAdress().length(); int k3 = d.getContact().length();
							cout << "kolvo " << k1 << " " << k2 << " " << k3 << endl;
							name = new char[k1]; adress = new char[k2]; contact = new char[k3];
							strcpy(name, d.getName().c_str());
							strcpy(adress, d.getAdress().c_str());
							strcpy(contact, d.getContact().c_str());
							cout << name << " " << adress << " " << contact << endl;
							char ck1[2], ck2[2], ck3[2];
							itoa(k1, ck1, 10); itoa(k2, ck2, 10); itoa(k3, ck3, 10);
							cout << ck1 << " " << ck2 << " " << ck3 << endl;
							send(newConnection, ck1, sizeof(ck1), NULL);
							send(newConnection, ck2, sizeof(ck2), NULL);
							send(newConnection, ck3, sizeof(ck3), NULL);
							cout << "отправка чисел прошла норм" << endl;
							send(newConnection, name, strlen(name), NULL);
							send(newConnection, adress, strlen(adress), NULL);
							send(newConnection, contact, strlen(contact), NULL);
							cout << "отправка строк прошла норм" << endl;
						}
						else if (ch == '2') {
							char z1[4], z2[4], z3[4], z4[4], z5[4], z6[4];
							recv(newConnection, z1, sizeof(z1), NULL);
							recv(newConnection, z2, sizeof(z2), NULL);
							recv(newConnection, z3, sizeof(z3), NULL);
							recv(newConnection, z4, sizeof(z4), NULL);
							recv(newConnection, z5, sizeof(z5), NULL);
							recv(newConnection, z6, sizeof(z6), NULL);
							double R2 = atof(z1), r1 = atof(z2), r2 = atof(z3), o1 = atof(z4), o2 = atof(z5), o3 = atof(z6);
							ch = zak.metod(R2, r1, r2, o1, o2, o3);
							send(newConnection, &ch, sizeof(ch), NULL);
						}
						else if (ch == '3') {
							char clen_log[2] = { 0 }, clen_pas[2] = { 0 };
							recv(newConnection, clen_log, sizeof(clen_log), NULL);
							int len_log = atoi(clen_log);
							cout << "kol-vo elementov logina: " << len_log << endl;
							recv(newConnection, clen_pas, sizeof(clen_pas), NULL);
							int len_pas = atoi(clen_pas);
							cout << "kol-vo elementov parolia: " << len_pas << endl;

							char clen_log2[2] = { 0 }, clen_pas2[2] = { 0 };
							recv(newConnection, clen_log2, sizeof(clen_log2), NULL);
							int len_log2 = atoi(clen_log2);
							cout << "kol-vo elementov logina: " << len_log2 << endl;
							recv(newConnection, clen_pas2, sizeof(clen_pas2), NULL);
							int len_pas2 = atoi(clen_pas2);
							cout << "kol-vo elementov parolia: " << len_pas2 << endl;

							char loginr[200] = { 0 }, passwr[200] = { 0 };
							recv(newConnection, loginr, len_log, NULL);  cout << loginr << endl;
							recv(newConnection, passwr, len_pas, NULL);  cout << passwr << endl;
							recv(newConnection, login2, len_log2, NULL);  cout << login2 << endl;
							recv(newConnection, passw2, len_pas2, NULL);  cout << passw2 << endl;
							cout << "Start" << endl;
							if (user.redacLogin(loginr, passwr, login2, passw2) == 5) {
								ch = '1';
								send(newConnection, &ch, sizeof(ch), NULL);
							}
							else {
								ch = '0';
								send(newConnection, &ch, sizeof(ch), NULL);
							}
						}

					}
					else cout << "Неправильный логин или пароль!" << endl;
				}

				if (ch == '3') {
					break;
				}
			}
			closesocket(newConnection);
			closesocket(sListen);
			WSACleanup();
			system("pause");
			return 0;
		}
	}
}
